#!/usr/bin/perl

package Blast::Annotator;

=pod

=head1 NAME

Blast::Annotator - Given a multi-fasta file, creates a table of annotation based on the NR database, as well as optionally creating a multi-fasta file based on the input that also includes the annotation in the fasta header

=head1 SYNOPSIS

	my $annotator = Blast::Annotator->new(
		'inputFile'=>'/input/file/name.fasta' ,
		'outputFile'=>'/location/of/annotated/table.txt',
		'blastDirectory'=>'/home/phac/ncbi-blast-2.2.26+/bin/',
		'blastDatabase'=>'/home/phac/workspace/Panseq_dev/Panseq2/NCBI_DB/NR',
		'numberOfCores'=>'20',
		'annotatedFastaFile'=>'/location/file_annotated.fasta' #this argument is optional
	);
	$annotator->annotate();

=head1 DESCRIPTION

Blast::Annotator is used for simple annotation of fasta sequences, producing a table of annotations and an optional multi-fasta file including the annotation in the header
eg. 
Original
>gi|gi|257757386|dbj|AP010958_1|
ATCG

After annotation
>anno|synthase_[Escherichia_coli_O157:H7_str._Sakai]|gi|gi|257757386|dbj|AP010958_1|
ATCG

=head2 Methods

=head3 new

Create a new object of class Blast::Annotator and call _initialize()

=head3 inputFile

Location of the multi-fasta file that will be annotated.

=head3 outputFile

Location of the tab-delimited annotation file that will be created.

=head3 blastDirectory

Location of the /bin directory of the blast software suite.

=head3 blastDatabase

Location of the NR blast database.
eg. /my/databases/blast/NR

=head3 numberOfCores

Number of threads to use in running the blast comparison against the NR database.

=head3 _xmlFile

Private variable for location of the XML output generated by blast; defaults to the same same as the outputFile but with an '.xml' extension.

=head3 _outputFH

Private variable that stores an IO::File object for output of the annotation table file.

=head3 annotatedFastaFile

Location of the optional fasta file containing the annotation information in the header.
By specifying this location, the program automatically generates the file; by default, the annotated fasta file is not created.

=head3 _retriever

Private variable storing a FileManipulation::SequenceRetriever object used for generating the annotated fasta file.
Generated a database of the original fasta file for fast extraction during the annotation process.







=head1 ACKNOWLEDGEMENTS

Thanks.

=head1 COPYRIGHT

This work is released under the GNU General Public License v3  http://www.gnu.org/licenses/gpl.html

=head1 AVAILABILITY

The most recent version of the code may be found at: https://github.com/chadlaing/Panseq

=head1 AUTHOR

Chad Laing (chadlaing gmail com)

=cut
#includes
use strict;
use warnings;
use diagnostics; 
use Carp;
use FindBin;
use lib "$FindBin::Bin";
use Blast::BlastIO;
use MSA::BlastBased::BlastResultFactory;
use IO::File;
use FileInteraction::Fasta::SequenceRetriever;
use Bio::Seq;
use Bio::SeqIO;


#object creation
sub new {
	my ($class) = shift;
	my $self = {};
	bless( $self, $class );
	$self->_initialize(@_);
	return $self;
}

sub inputFile{
	my $self=shift;
	$self->{'_inputFile'}=shift // return $self->{'_inputFile'};
}

sub outputFile{
	my $self=shift;
	$self->{'_outputFile'}=shift // return $self->{'_outputFile'};
}

sub blastDirectory{
	my $self=shift;
	$self->{'_blastDirectory'}=shift // return $self->{'_blastDirectory'};
}

sub blastDatabase{
	my $self=shift;
	$self->{'_blastDatabase'}=shift // return $self->{'_blastDatabase'};
}

sub numberOfCores{
	my $self=shift;
	$self->{'_numberOfCores'}=shift // return $self->{'_numberOfCores'};
}

sub _xmlFile{
	my $self=shift;
	$self->{'__xmlFile'}=shift // return $self->{'__xmlFile'};
}

sub _outputFH{
	my $self=shift;
	$self->{'__outputFH'}=shift // return $self->{'__outputFH'};
}

sub annotatedFastaFile{
	my $self=shift;
	$self->{'_annotatedFastaFile'}=shift // return $self->{'_annotatedFastaFile'};
}

sub _annotatedFastaFH{
	my $self=shift;
	$self->{'__annotatedFastaFH'}=shift // return $self->{'__annotatedFastaFH'};
}

sub _retriever{
	my $self=shift;
	$self->{'__retriever'}=shift // return $self->{'__retriever'};
}

sub _initialize{
	my $self = shift;

	my %init = @_;

	$self->inputFile($init{'inputFile'}) // $self->_initError('inputFile');
	$self->outputFile($init{'outputFile'}) // $self->_initError('outputFile');
	$self->_outputFH(IO::File->new('>' . $self->outputFile)) or die "Cannot create outputFH $!\n";
	$self->_xmlFile($self->outputFile . '.xml');
	$self->blastDirectory($init{'blastDirectory'}) // $self->_initError('blastDirectory');
	$self->blastDatabase($init{'blastDatabase'}) // $self->_initError('blastDatabase');
	$self->numberOfCores($init{'numberOfCores'}) // $self->_initError('numberOfCores');

	if(defined $init{'annotatedFastaFile'}){
		$self->annotatedFastaFile($init{'annotatedFastaFile'}) // $self->_initError('annotatedFastaFile');
		$self->_retriever(
			FileInteraction::Fasta::SequenceRetriever->new(
				'inputFile'=>$self->inputFile
			)
		);
		$self->_annotatedFastaFH(Bio::SeqIO->new(-file=>'>'. $self->annotatedFastaFile, -format=>'fasta')) or die "Cannot create annotatedFastaFH";
	}
}


sub annotate{
	my $self=shift;

	my $blaster = Blast::BlastIO->new({
		'blastDirectory'=>$self->blastDirectory,
		'type'=>'blastx',
		'db'=>$self->blastDatabase,
		'outfmt'=>'5',
		'evalue'=>'0.001',
		'word_size'=>3,
		'num_threads'=>$self->numberOfCores,
		'query'=>$self->inputFile,
		'out'=>$self->_xmlFile,
		'max_target_seqs'=>1,
		'best_hit_score_edge'=>0.1,
		'best_hit_overhang'=>0.1
	});

	$blaster->runBlastn();

	$self->_createOutputFile();
}

sub _createOutputFile{
	my $self = shift;

	my $inFH = IO::File->new('<' . $self->_xmlFile) or die "Cannot open xml file " . $self->_xmlFile . "$!\n";
	my $blastFactory = MSA::BlastBased::BlastResultFactory->new($inFH);

	$self->_printColumnHeaders();

	while(my $resultObj = $blastFactory->nextResult){
		$self->_processResult($resultObj);
	}
	$inFH->close();
}

sub _printColumnHeaders{
	my $self=shift;

	$self->_outputFH->print(
		'Query' . "\t",
		'Query Length' . "\t",
		'Hit Accession' . "\t",
		'Hit Description' . "\t",
		'Hit Length' . "\t",
		'Hit Score' . "\t",
		'E-value' . "\n"
	);
}

sub _processResult{
	my $self=shift;
	my $result = shift;

	$self->_outputFH->print(
		$result->query_def . "\t",
		$result->query_len . "\t"
	);

	if(defined $result->firstHitName){
		$self->_outputFH->print(
			$result->hitHash->{$result->firstHitName}->hit_accession . "\t",
			$result->hitHash->{$result->firstHitName}->hit_def . "\t",
			$result->hitHash->{$result->firstHitName}->hit_len . "\t",
			$result->hitHash->{$result->firstHitName}->hsp_score . "\t",
			$result->hitHash->{$result->firstHitName}->hsp_evalue . "\n",
		);
	}
	else{
		$self->_outputFH->print(
			('-' . "\t")x5,
			'-' . "\n"
		);
	}

	#create a modified novelRegions fasta file containing the annotation in the fasta header >anno|<annotation><original header>
	if(defined $self->annotatedFastaFile){
		$self->_createAnnotatedFastaFile($result);
	}
}

sub _createAnnotatedFastaFile{
	my $self=shift;
	my $result=shift;

	my $newId = 'anno|';
	if(defined $result->firstHitName){
		$newId .= $result->hitHash->{$result->firstHitName}->hit_def;
	}
	else{
		$newId .= 'UNKNOWN'
	}
	$newId .= '|'. $result->query_def; 

	$newId =~ s/\s/_/g;

	my $tempSeq = Bio::Seq->new(
		-seq => $self->_retriever->extractRegion($result->query_def),
		-id => $newId
	);

	$self->_annotatedFastaFH->write_seq($tempSeq);
}

sub _initError{
	my $self=shift;
	my $initValue=shift;

	confess(
		$initValue . ' is required in Blast::Annotator' . "\n",
		'The proper constructor format is:' . "\n",
		"\t" . 'my $obj = Blast::Annotator->new(' . "\n",
		"\t\t" . q('inputFile'=>'/file/name.fasta') . "\n",
		"\t\t" . q('outputFile'=>'/file/name.txt') . "\n",
		"\t\t" . q('blastDirectory'=>'/ncbi/blast/bin/') . "\n",
		"\t\t" . q('numberOfCores'=>'3') . "\n",
		"\t" . ')' . "\n"
	);
}

sub DESTROY{
	my $self = shift;

	#close FH on obj end
	$self->_outputFH->close();
}

1;
