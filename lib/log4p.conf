#log4p conf
#screen appender uses STDERR as default, set stderr to 0 to allow trapping STDERR from mummer

layout_format =  %d %p |  %F{1}:%L> %m %n

log4perl.logger											 	= INFO, LOG1
log4perl.appender.LOG1          				 			= Log::Log4perl::Appender::Screen
log4perl.appender.LOG1.stderr 								= 0
log4perl.appender.LOG1.Threshold 							= INFO
log4perl.appender.LOG1.mode      							= append
log4perl.appender.LOG1.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG1.layout.ConversionPattern 			= ${layout_format}

log4perl.logger.Modules.Setup.PanseqFiles		             = DEBUG, LOG2
log4perl.appender.LOG2           							= Log::Log4perl::Appender::File
log4perl.appender.LOG2.filename  							= sub{return panseq_files_file();}
log4perl.appender.LOG2.mode     							= append
log4perl.appender.LOG2.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG2.layout.ConversionPattern 			= ${layout_format}

log4perl.logger.Modules.Alignment.NucmerRun             	= DEBUG, LOG3
log4perl.appender.LOG3           							= Log::Log4perl::Appender::File
log4perl.appender.LOG3.filename  							= sub{return nucmer_run_file();}
log4perl.appender.LOG3.mode     							= append
log4perl.appender.LOG3.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG3.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.NovelRegion.NovelRegionFinder       = DEBUG, LOG5
log4perl.appender.LOG5           							= Log::Log4perl::Appender::File
log4perl.appender.LOG5.filename  							= sub{return novel_region_finder_file();}
log4perl.appender.LOG5.mode     							= append
log4perl.appender.LOG5.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG5.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Fasta.SequenceName 				    = DEBUG, LOG6
log4perl.appender.LOG6           							= Log::Log4perl::Appender::File
log4perl.appender.LOG6.filename  							= sub{return sequence_name_file();}
log4perl.appender.LOG6.mode     							= append
log4perl.appender.LOG6.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG6.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Fasta.MultiFastaSequenceName 		= DEBUG, LOG7
log4perl.appender.LOG7           							= Log::Log4perl::Appender::File
log4perl.appender.LOG7.filename  							= sub{return multi_fasta_sequence_name_file();}
log4perl.appender.LOG7.mode     							= append
log4perl.appender.LOG7.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG7.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.NovelRegion.NovelIterator	 		= DEBUG, LOG8
log4perl.appender.LOG8           							= Log::Log4perl::Appender::File
log4perl.appender.LOG8.filename  							= sub{return novel_iterator_file();}
log4perl.appender.LOG8.mode     							= append
log4perl.appender.LOG8.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG8.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Alignment.BlastRun 			 		= DEBUG, LOG9
log4perl.appender.LOG9           							= Log::Log4perl::Appender::File
log4perl.appender.LOG9.filename  							= sub{return blast_run_file();}
log4perl.appender.LOG9.mode     							= append
log4perl.appender.LOG9.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG9.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Alignment.BlastResultFactory 		= DEBUG, LOG10
log4perl.appender.LOG10           							= Log::Log4perl::Appender::File
log4perl.appender.LOG10.filename  							= sub{return blast_result_factory_file();}
log4perl.appender.LOG10.mode     							= append
log4perl.appender.LOG10.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG10.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Alignment.SNPFinder			 		= DEBUG, LOG11
log4perl.appender.LOG11           							= Log::Log4perl::Appender::File
log4perl.appender.LOG11.filename  							= sub{return snp_finder_file();}
log4perl.appender.LOG11.mode     							= append
log4perl.appender.LOG11.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG11.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Fasta.FastaFileSplitter		 		= DEBUG, LOG12
log4perl.appender.LOG12           							= Log::Log4perl::Appender::File
log4perl.appender.LOG12.filename  							= sub{return fasta_file_splitter_file();}
log4perl.appender.LOG12.mode     							= append
log4perl.appender.LOG12.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG12.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Fasta.SequenceRetriever		 		= DEBUG, LOG13
log4perl.appender.LOG13           							= Log::Log4perl::Appender::File
log4perl.appender.LOG13.filename  							= sub{return sequence_retriever_file();}
log4perl.appender.LOG13.mode     							= append
log4perl.appender.LOG13.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG13.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Fasta.SegmentMaker			 		= DEBUG, LOG14
log4perl.appender.LOG14           							= Log::Log4perl::Appender::File
log4perl.appender.LOG14.filename  							= sub{return segment_maker_file();}
log4perl.appender.LOG14.mode     							= append
log4perl.appender.LOG14.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG14.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.PanGenome.PanGenome			 		= DEBUG, LOG15
log4perl.appender.LOG15           							= Log::Log4perl::Appender::File
log4perl.appender.LOG15.filename  							= sub{return pan_genome_file();}
log4perl.appender.LOG15.mode     							= append
log4perl.appender.LOG15.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG15.layout.ConversionPattern 			=${layout_format}





