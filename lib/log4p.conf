#log4p conf
#screen appender uses STDERR as default, set stderr to 0 to allow trapping STDERR from mummer

layout_format =  %d %p |  %F{1}:%L> %m %n

log4perl.logger											 	= INFO, LOG1
log4perl.appender.LOG1          				 			= Log::Log4perl::Appender::Screen
log4perl.appender.LOG1.stderr 								= 0
log4perl.appender.LOG1.Threshold 							= INFO
log4perl.appender.LOG1.mode      							= append
log4perl.appender.LOG1.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG1.layout.ConversionPattern 			= ${layout_format}

log4perl.logger.Modules.Setup.PanseqFiles		             = DEBUG, LOG2
log4perl.appender.LOG2           							= Log::Log4perl::Appender::File
log4perl.appender.LOG2.filename  							= sub{return panseq_files_file();}
log4perl.appender.LOG2.mode     							= append
log4perl.appender.LOG2.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG2.layout.ConversionPattern 			= ${layout_format}

log4perl.logger.Modules.Mummer.NucmerRun             		= DEBUG, LOG3
log4perl.appender.LOG3           							= Log::Log4perl::Appender::File
log4perl.appender.LOG3.filename  							= sub{return nucmer_run_file();}
log4perl.appender.LOG3.mode     							= append
log4perl.appender.LOG3.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG3.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.NovelRegion.NovelRegionFinder       = DEBUG, LOG5
log4perl.appender.LOG5           							= Log::Log4perl::Appender::File
log4perl.appender.LOG5.filename  							= sub{return novel_region_finder_file();}
log4perl.appender.LOG5.mode     							= append
log4perl.appender.LOG5.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG5.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Fasta.SequenceName 				    = DEBUG, LOG6
log4perl.appender.LOG6           							= Log::Log4perl::Appender::File
log4perl.appender.LOG6.filename  							= sub{return sequence_name_file();}
log4perl.appender.LOG6.mode     							= append
log4perl.appender.LOG6.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG6.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.Fasta.MultiFastaSequenceName 		= DEBUG, LOG7
log4perl.appender.LOG7           							= Log::Log4perl::Appender::File
log4perl.appender.LOG7.filename  							= sub{return multi_fasta_sequence_name_file();}
log4perl.appender.LOG7.mode     							= append
log4perl.appender.LOG7.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG7.layout.ConversionPattern 			=${layout_format}

log4perl.logger.Modules.NovelRegion.NovelIterator	 		= DEBUG, LOG8
log4perl.appender.LOG8           							= Log::Log4perl::Appender::File
log4perl.appender.LOG8.filename  							= sub{return novel_iterator_file();}
log4perl.appender.LOG8.mode     							= append
log4perl.appender.LOG8.layout    							= Log::Log4perl::Layout::PatternLayout
log4perl.appender.LOG8.layout.ConversionPattern 			=${layout_format}

